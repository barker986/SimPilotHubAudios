import React, { useState } from "react";

// Custom SVG Icons
const Icon = ({ name }) => {
  switch (name) {
    case "airplane":
      return (
        <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <path d="M16 12l4-4-4-4m-4 4H3m15.5 9.5L16 19l-4 2-4-2-2.5-2.5M7 13l-2-2 2-2" strokeLinecap="round" strokeLinejoin="round" />
        </svg>
      );
    case "audio":
      return (
        <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <circle cx="12" cy="12" r="10" />
          <polygon points="10 8 16 12 10 16 10 8" />
        </svg>
      );
    case "checklist":
      return (
        <svg className="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
          <polyline points="20 6 9 17 4 12" />
        </svg>
      );
    default:
      return null;
  }
};

export default function App() {
  const [activeSection, setActiveSection] = useState("home");

  // √Åudio URLs
  const audioList = [
    { name: "Boarding", url: "/audios/01Boarding.mp3" },
    { name: "Close Doors", url: "/audios/02close-doors.mp3" },
    { name: "PA Test", url: "/audios/03Pa-test.mp3" },
    { name: "Safety", url: "/audios/04Safety.mp3" },
    { name: "Takeoff", url: "/audios/05takeoff.mp3" },
    { name: "FL100", url: "/audios/06fl100.mp3" },
    { name: "Climb", url: "/audios/07climb.mp3" },
    { name: "Cruise", url: "/audios/08cruise.mp3" },
    { name: "Meal Service", url: "/audios/09meal-service.mp3" },
    { name: "Final Descent", url: "/audios/10Final_Descent.mp3" },
    { name: "Landing", url: "/audios/11landing.mp3" },
    { name: "Taxi In", url: "/audios/12taxi-in.mp3" },
    { name: "Seat Belts", url: "/audios/13seat-belts.mp3" }
  ];

  // Checklists Boeing 737-800
  const checklist737Items = [
    {
      title: "üîã 1. Antes do voo ‚Äì Pre-flight",
      items: ["Parking brake: SET", "Battery / Standby Power: GUARD CLOSED", "GND PWR (se utilizado): ON"]
    },
    {
      title: "‚ñ∂Ô∏è 2. Antes da partida ‚Äì Before Start",
      items: ["Pushback/start clearance: Requested", "Autothrottle: ARM", "Fuel & hydraulic pumps: ON/as required"]
    },
    {
      title: "üîß 3. Partida dos motores ‚Äì Engine Start",
      items: ["EICAS/SDU: SELECT ENGINE", "PACKs: OFF", "ENGINE START switch(es): GND, depois CONT"]
    },
    {
      title: "‚úàÔ∏è 4. Antes da taxi ‚Äì Before Taxi",
      items: ["Generators 1 & 2: ON", "Probe heat, wing/engine anti-ice: AS REQUIRED", "PACKs: AUTO"]
    },
    {
      title: "üõ´ 5. Antes da decolagem ‚Äì Before Takeoff",
      items: ["Parking brake: SET", "Fuel flow reset, center pumps: As required", "Navigation equipment: CHECK"]
    },
    {
      title: "üìà 6. Ap√≥s a decolagem ‚Äì After Takeoff",
      items: ["Positive rate: GEAR UP", "Engine start switches: OFF, gear lever UP", "Cabin lighting: as required"]
    },
    {
      title: "‚öôÔ∏è 7. Climb / Cruise",
      items: ["Autoland altitude passed: flight directors, autopilot, LNAV/VNAV SET", "Lights: landing off"]
    },
    {
      title: "üõ¨ 8. Descida e aproxima√ß√£o ‚Äì Descent & Approach",
      items: ["ATIS/airport info checked; altimeter and radios set", "FMC approach, localizer frequencies"]
    },
    {
      title: "üõ¨ 9. Pouso ‚Äì Landing & Rollout",
      items: ["Go-around altitude set", "Turn-off lights ON", "After touchdown: thrust reversers..."]
    },
    {
      title: "üöß 10. Ap√≥s o pouso ‚Äì After Landing",
      items: ["Transponder: OFF or STBY", "Flaps: RETRACT", "APU START"]
    }
  ];

  // Checklist Airbus A320
  const checklistA320Items = [
    {
      title: "1. Before Start ‚Äì Antes da Partida",
      items: ["Battery 1 & 2: ON", "EXT PWR / APU: AVAIL / ON", "ADIRS: NAV", "Flight plan (MCDU): INSERTED"]
    },
    {
      title: "‚ñ∂Ô∏è 2. Engine Start ‚Äì Partida dos Motores",
      items: ["APU bleed: ON", "PACK 1 & 2: OFF", "Engine Mode Selector: IGN/START", "Engine 2 lever: ON"]
    },
    {
      title: "üõë 10. Security ‚Äì Seguran√ßa",
      items: ["Cockpit door locked: CONFIRMED", "Security briefing: COMPLETE"]
    }
  ];

  // Estado do METAR
  const [metarResult, setMetarResult] = useState(null);
  const [icaoInput, setIcaoInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [metarError, setMetarError] = useState("");

  const fetchMetar = async () => {
    if (!icaoInput || icaoInput.length !== 4) {
      setMetarError("Por favor, insira um c√≥digo ICAO v√°lido (4 letras).");
      return;
    }

    setIsLoading(true);
    setMetarError("");
    try {
      const response = await fetch(`https://avwx.rest/api/metar/${icaoInput}`,  {
        headers: {
          Authorization: "Bearer bRYcqunUEU6IGxdUi4jNVv2pH3VcshL1aL_qGuN0P1g"
        }
      });

      if (!response.ok) throw new Error("METAR n√£o encontrado ou erro na API.");

      const data = await response.json();
      setMetarResult(data);
    } catch (e) {
      console.error(e);
      setMetarError("Erro ao buscar METAR.");
      setMetarResult(null);
    } finally {
      setIsLoading(false);
    }
  };

  const iconByCondition = (cond) => {
    if (!cond) return "‚òÄÔ∏è";
    if (cond.includes("Rain") || cond.includes("Shower")) return "üåßÔ∏è";
    if (cond.includes("Snow") || cond.includes("Sleet")) return "‚ùÑÔ∏è";
    if (cond.includes("Fog") || cond.includes("Mist")) return "üå´Ô∏è";
    if (cond.includes("Thunderstorm")) return "‚õàÔ∏è";
    if (cond.includes("Cloud") || cond.includes("Overcast") || cond.includes("BKN")) return "‚òÅÔ∏è";
    return "‚òÄÔ∏è";
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white font-sans">
      {/* Header */}
      <header className="bg-blue-900 shadow-md sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <Icon name="airplane" />
            <span className="text-xl font-bold">SimPilot Hub</span>
          </div>

          <nav className="hidden md:flex space-x-4 lg:space-x-6">
            <button onClick={() => setActiveSection("home")} className={`hover:text-blue-300 ${activeSection === "home" ? "text-blue-300" : ""}`}>Home</button>
            <button onClick={() => setActiveSection("audios")} className={`hover:text-blue-300 ${activeSection === "audios" ? "text-blue-300" : ""}`}>√Åudios</button>
            <button onClick={() => setActiveSection("checklist737")} className={`hover:text-blue-300 ${activeSection === "checklist737" ? "text-blue-300" : ""}`}>Checklist 737-800</button>
            <button onClick={() => setActiveSection("checklistA320")} className={`hover:text-blue-300 ${activeSection === "checklistA320" ? "text-blue-300" : ""}`}>Checklist A320</button>
            <button onClick={() => setActiveSection("briefing")} className={`hover:text-blue-300 ${activeSection === "briefing" ? "text-blue-300" : ""}`}>METAR</button>
            <button onClick={() => setActiveSection("webeye")} className={`hover:text-blue-300 ${activeSection === "webeye" ? "text-blue-300" : ""}`}>IVAO WebEye</button>
            <button onClick={() => setActiveSection("simbrief")} className={`hover:text-blue-300 ${activeSection === "simbrief" ? "text-blue-300" : ""}`}>SimBrief</button>
          </nav>
        </div>
      </header>

      {/* Conte√∫do Principal */}
      <main className="container mx-auto px-4 py-8">
        {/* Home */}
        {activeSection === "home" && (
          <section className="relative h-[60vh] rounded-lg overflow-hidden mb-12">
            <div className="absolute inset-0 bg-gradient-to-r from-blue-900 to-transparent z-10"></div>
            <img src="B77WFDa-M.jpg" alt="Cockpit" className="w-full h-full object-cover" />
            <div className="absolute inset-0 flex items-center px-8 z-20">
              <div className="max-w-2xl">
                <h1 className="text-4xl md:text-5xl font-bold mb-4">Bem-vindo ao SimPilot Hub</h1>
                <p className="text-xl mb-6">Central de recursos para simula√ß√£o a√©rea profissional.</p>
                <div className="flex flex-wrap gap-4">
                  <button onClick={() => setActiveSection("audios")} className="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded flex items-center transition">
                    <Icon name="audio" /> <span className="ml-2">Acessar √Åudios</span>
                  </button>
                  <button onClick={() => setActiveSection("checklist737")} className="bg-gray-800 hover:bg-gray-700 px-6 py-3 rounded flex items-center transition">
                    <Icon name="checklist" /> <span className="ml-2">Checklists</span>
                  </button>
                </div>
              </div>
            </div>
          </section>
        )}

        {/* √Åudios */}
        {activeSection === "audios" && (
          <section className="mb-12">
            <h2 className="text-3xl font-bold mb-8">√Åudios de Comunica√ß√£o</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {audioList.map((audio, index) => (
                <div key={index} className="bg-gray-800 rounded-lg overflow-hidden shadow-lg transform transition hover:scale-105">
                  <div className="h-32 bg-gradient-to-r from-blue-600 to-blue-400 flex items-center justify-center">
                    <Icon name="audio" />
                  </div>
                  <div className="p-4">
                    <h3 className="font-semibold mb-3">{audio.name}</h3>
                    <audio controls className="w-full">
                      <source src={audio.url} type="audio/mpeg" />
                      Seu navegador n√£o suporta √°udio.
                    </audio>
                  </div>
                </div>
              ))}
            </div>
          </section>
        )}

        {/* Checklist 737 */}
        {activeSection === "checklist737" && (
          <section className="mb-12">
            <h2 className="text-3xl font-bold mb-8">Checklist Boeing 737-800</h2>
            {checklist737Items.map((group, idx) => (
              <div key={idx} className="bg-gray-800 p-6 rounded-lg shadow-lg mb-6">
                <h3 className="text-xl font-semibold mb-4">{group.title}</h3>
                <div className="space-y-3 mb-4">
                  {group.items.map((item, i) => (
                    <div key={i} className="flex items-center">
                      <input
                        type="checkbox"
                        id={`737-${idx}-${i}`}
                        className="mr-3 accent-blue-600"
                      />
                      <label htmlFor={`737-${idx}-${i}`} className="cursor-pointer">{item}</label>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </section>
        )}

        {/* Checklist A320 */}
        {activeSection === "checklistA320" && (
          <section className="mb-12">
            <h2 className="text-3xl font-bold mb-8">Checklist Airbus A320</h2>
            {checklistA320Items.map((group, idx) => (
              <div key={idx} className="bg-gray-800 p-6 rounded-lg shadow-lg mb-6">
                <h3 className="text-xl font-semibold mb-4">{group.title}</h3>
                <div className="space-y-3 mb-4">
                  {group.items.map((item, i) => (
                    <div key={i} className="flex items-center">
                      <input
                        type="checkbox"
                        id={`a320-${idx}-${i}`}
                        className="mr-3 accent-blue-600"
                      />
                      <label htmlFor={`a320-${idx}-${i}`} className="cursor-pointer">{item}</label>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </section>
        )}

        {/* METAR */}
        {activeSection === "briefing" && (
          <section className="mb-12">
            <h2 className="text-3xl font-bold mb-8">Consultar METAR</h2>
            <div className="bg-gray-800 p-6 rounded-lg shadow-lg max-w-lg mx-auto">
              <div className="flex gap-3 mb-4">
                <input
                  type="text"
                  placeholder="Ex: SBGR"
                  value={icaoInput}
                  onChange={(e) => setIcaoInput(e.target.value.toUpperCase())}
                  maxLength={4}
                  className="flex-grow px-4 py-2 bg-gray-700 border border-gray-600 rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button
                  onClick={fetchMetar}
                  disabled={icaoInput.length !== 4}
                  className={`bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-r transition ${icaoInput.length !== 4 ? "opacity-50 cursor-not-allowed" : ""}`}
                >
                  Buscar
                </button>
              </div>

              {isLoading && <p>Carregando METAR...</p>}
              {metarError && <p className="text-red-400 mb-4">{metarError}</p>}

              {metarResult && (
                <div className="mt-4 bg-gray-700 p-4 rounded">
                  <h3 className="text-xl font-semibold mb-2">Resultado - {metarResult.station}</h3>
                  <div className="text-sm text-green-400 mb-2">
                    {iconByCondition(metarResult.weather?.description)}{" "}
                    {metarResult.weather?.description || "Clear"}
                  </div>
                  <pre className="bg-gray-800 p-3 rounded whitespace-pre-wrap">
                    {metarResult.raw || "Dados n√£o dispon√≠veis."}
                  </pre>
                  <div className="text-xs text-gray-400 mt-2">
                    Atualizado: {new Date(metarResult.time?.dt || Date.now()).toLocaleString()}
                  </div>
                </div>
              )}
            </div>
          </section>
        )}

        {/* WebEye */}
        {activeSection === "webeye" && (
          <section className="mb-12">
            <h2 className="text-3xl font-bold mb-8">IVAO WebEye</h2>
            <div className="bg-gray-800 rounded-lg shadow-lg overflow-hidden">
              <div className="aspect-video bg-black flex items-center justify-center">
                <iframe
                  src="https://webeye.ivao.aero/" 
                  title="IVAO WebEye"
                  className="w-full h-full"
                  frameBorder="0"
                  allowFullScreen
                ></iframe>
              </div>
            </div>
          </section>
        )}

        {/* SimBrief */}
        {activeSection === "simbrief" && (
          <section className="mb-12">
            <h2 className="text-3xl font-bold mb-8">SimBrief</h2>
            <div className="bg-gray-800 rounded-lg shadow-lg overflow-hidden">
              <div className="aspect-video bg-black flex items-center justify-center">
                <iframe
                  src="https://www.simbrief.com/home/" 
                  title="SimBrief"
                  className="w-full h-full"
                  frameBorder="0"
                  allowFullScreen
                ></iframe>
              </div>
            </div>
          </section>
        )}
      </main>

      {/* Rodap√© */}
      <footer className="bg-gray-800 py-6">
        <div className="container mx-auto px-4 text-center text-gray-400 text-sm">
          &copy; {new Date().getFullYear()} SimPilot Hub - Todos os direitos reservados
        </div>
      </footer>
    </div>
  );
}
